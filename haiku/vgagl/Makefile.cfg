#----------------------------------------------------------------------
# SVGAlib Compile-time configuration file
#----------------------------------------------------------------------
# If you change ANYTHING in here you MUST 'make clean' and remake what
# you need.
#
# BEWARE! The toggle settings (INCLUDE_*_DRIVER and such) are set when
# the symbols are set. The value is pointless. Even setting a variable
# to n means yes!

MAJOR_VER = 1
MINOR_VER = 4.3
VERSION = $(MAJOR_VER).$(MINOR_VER)

#----------------------------------------------------------------------
# Configuration Section
#----------------------------------------------------------------------

# Source directory.
#srcdir = /usr/local/src/svgalib-$(VERSION)
srcdir = $(shell sh -c pwd)

confdir = $(srcdir)/src/config

# Common prefix for installation directories.
# NOTE: This directory must exist when you start the install.
TOPDIR=
prefix = $(TOPDIR)/boot/home/config
exec_prefix = $(prefix)

# Directory where the shared stubs and static library will be installed.
libdir = $(exec_prefix)/lib

# Directory where the shared library will be installed.
sharedlibdir = $(prefix)/lib

# Directory where the font and textmode utilities will be installed.
bindir = $(exec_prefix)/bin

# Directory where the run-time configuration files will be installed.
datadir = $(TOPDIR)/etc/vga

# Directory where the header files will be installed.
includedir = $(prefix)/include

# Directory where the man files will be installed.
mandir = $(prefix)/man

# Target binary format.
# TARGET_FORMAT = a.out
TARGET_FORMAT = elf

#uncomment this if your compiler fails on compiling the assembler in
#src/vgaconvplanar.c, gl/inlstring.h, gl/line.c or gl/scale.c
NO_ASM = y

# Uncomment this if you want root processes to be able to always get a new
# VC. Alas, some games misuse suid root privs and become root, svgalib cannot
# detect this and will allow Joe blow user to open a new virtual VC. If this
# annoys you, comment out the next line (which is the default already)
ROOT_VC_SHORTCUT = y

# Uncomment to enable run in background mode
# This doesn't work at all at the moment on linux-alpha-machines
#
# IMPORTANT NOTE: THIS ONLY WORKS WITH KERNEL >= 2.0.36 or KERNEL >= 2.1.123
#                 and KERNEL < 2.3.27
#                 If you compile with BACKGROUND=y, and run any
#                 program on a machine with an old kernel, the machine
#                 will crash hard as soon as the program tries to enter
#                 linear mode (or even before). 
#		  If you compile with BACKGROUND=y, and run any
#                 program on a machine with a new kernel (>=2.3.27)
#		  the program will fail with error message:
#		  svgalib: mmap error in paged screen memory.
#                 Enable this only if the resulting libraries will only be
#                 used on 2.2 (or 2.0.36+) kernels. 
#
# NOTE: I found it very slow on occasion. There are several case not handled
# optimal. (Like checking for console changes even when hardware is not
# accessed at all). You might really consider to disable it.   (MW)
# BACKGROUND = y

# Uncomment this if you want to compile and install the static libs.
# INSTALLSTATICLIB = installstaticlib

# Comment this out if you don't want to install the shared libs.
# If you do not install the shared nor the static libs, 'make static'
# first to enforce just building the static lib, then the demos will
# use this local static library!
INSTALLSHAREDLIB = installsharedlib

# In case your TARGET_FORMAT is elf and if a pre-compiled shared library
# a.out image is available install it in the first directory named something
# like *aout/ in /etc/ld.so.conf.
# If you want this, do not comment out the next line:
INSTALLAOUTLIB = installaoutcompat

# Comment this out if you want to keep old shared images. Old header files,
# library stubs and static libraries CANNOT be kept in public locations
# except when you rename them yourself.
# KEEPSHAREDLIBS = keep

# Comment this out if you don't want to compile and install the utilities.
INSTALLUTILS = installutils

# Comment this out if you don't want to install the man pages by default
INSTALLMAN = installman

# Remove the '# ' from one of the next two lines if you want to install the
# man pages compressed (with gzip) or not. If you comment out both lines,
# the Makefiles will try to figure out if your system supports gzipped man
# pages and install them when possible.

# MANFORMAT = compressed
# MANFORMAT = uncompressed

# This is the command to update the man pages whatis database.
# This is a slow command. If you are not very patient, simple
# comment out this line
# MAKEWHATIS = makewhatis # Beware, this will really need a few minutes!

#
# Comment out any driver that you don't want included in the library.
#
INCLUDE_ET4000_DRIVER = y
INCLUDE_CIRRUS_DRIVER = y
INCLUDE_TVGA_DRIVER = y
#INCLUDE_OAK_DRIVER = y
#INCLUDE_EGA_DRIVER = y
INCLUDE_MACH32_DRIVER = y
INCLUDE_S3_DRIVER = y
#INCLUDE_ET3000_DRIVER = y
#INCLUDE_GVGA6400_DRIVER = y
#INCLUDE_ARK_DRIVER = y
#INCLUDE_ATI_DRIVER = y
#INCLUDE_ALI_DRIVER = y
INCLUDE_CHIPS_DRIVER = y
INCLUDE_APM_DRIVER = y
INCLUDE_NV3_DRIVER = y
INCLUDE_ET6000_DRIVER = y
INCLUDE_VESA_DRIVER = y
INCLUDE_MX_DRIVER = y
INCLUDE_PARADISE_DRIVER = y
INCLUDE_RAGE_DRIVER = y
INCLUDE_BANSHEE_DRIVER = y
INCLUDE_SIS_DRIVER = y
INCLUDE_I740_DRIVER = y
INCLUDE_LAGUNA_DRIVER = y
INCLUDE_NEO_DRIVER = y
INCLUDE_R128_DRIVER = y
INCLUDE_G400_DRIVER = y
INCLUDE_FBDEV_DRIVER = y
INCLUDE_SAVAGE_DRIVER = y
#
# Comment out any adapter you don't want to autodetect.
#
INCLUDE_ET4000_DRIVER_TEST = y
INCLUDE_CIRRUS_DRIVER_TEST = y
INCLUDE_TVGA_DRIVER_TEST = y
#INCLUDE_OAK_DRIVER_TEST = y
#INCLUDE_EGA_DRIVER_TEST = y
INCLUDE_MACH32_DRIVER_TEST = y
#INCLUDE_GVGA6400_DRIVER_TEST = y
INCLUDE_S3_DRIVER_TEST = y
#INCLUDE_ET3000_DRIVER_TEST = y
#INCLUDE_ARK_DRIVER_TEST = y
#INCLUDE_ATI_DRIVER_TEST = y
#INCLUDE_ALI_DRIVER_TEST = y
INCLUDE_CHIPS_DRIVER_TEST = y
INCLUDE_APM_DRIVER_TEST = y
INCLUDE_NV3_DRIVER_TEST = y
INCLUDE_ET6000_DRIVER_TEST = y
INCLUDE_MX_DRIVER_TEST = y
INCLUDE_PARADISE_DRIVER_TEST = y
INCLUDE_RAGE_DRIVER_TEST = y
INCLUDE_BANSHEE_DRIVER_TEST = y
INCLUDE_SIS_DRIVER_TEST = y
INCLUDE_I740_DRIVER_TEST = y
INCLUDE_LAGUNA_DRIVER_TEST = y
INCLUDE_NEO_DRIVER_TEST = y
INCLUDE_G400_DRIVER_TEST = y
INCLUDE_R128_DRIVER_TEST = y
#INCLUDE_FBDEV_DRIVER_TEST = y
INCLUDE_SAVAGE_DRIVER_TEST = y

#Might be too dangerous:
INCLUDE_VESA_DRIVER_TEST = y

#
# Comment out any dac support that you don't want included in the library.
#
# you must include SIERRA_DAC, if you include any of SCxxxx DACs.

INCLUDE_NORMAL_DAC = y
INCLUDE_S3_SDAC_DAC = y
INCLUDE_S3_GENDAC_DAC = y
INCLUDE_S3_TRIO64_DAC = y
INCLUDE_SIERRA_DAC = y
INCLUDE_SC15025_DAC = y
INCLUDE_ATT20C490_DAC = y
INCLUDE_ATT20C498_DAC = y
INCLUDE_ICW_DAC = y
INCLUDE_IBMRGB52x_DAC = y
INCLUDE_SC1148X_DAC = y

#
# Comment out any dac you don't want to autodetect.
# (not all dacs can be autodetected, at this time)
#
INCLUDE_S3_SDAC_DAC_TEST = y
INCLUDE_S3_GENDAC_DAC_TEST = y
INCLUDE_SC15025_DAC_TEST = y
INCLUDE_ATT20C490_DAC_TEST = y
INCLUDE_IBMRGB52x_DAC_TEST = y
INCLUDE_SC1148X_DAC_TEST = y

# Location of the svgalib configuration file.
SVGALIB_CONFIG_FILE = $(datadir)/libvga.config

# Defining DYNAMIC enables runtime parsing of the file defined by
# ET4000_REGS (usually /etc/libvga.et4000) for the et4000 
# driver. See et4000/README for details. Commenting this out again
# saves binary space.
#
# If you just want to use the et4000.regs in the source directory,
# comment out the definition of DYNAMIC.  DYNAMIC allows development of new
# resolutions without recompiling.
DYNAMIC = y
ET4000_REGS = $(datadir)/libvga.et4000

# The EGA driver may load additional modes (SuperEGA cards) like the
# et4000 driver does. Just define the configuration file below.
# [This should be taken with a grain of salt, EGA is untested.]
#EGA_REGS = $(datadir)/libvga.ega

# Defining USE_CLOCKS will cause the ET4000 driver to measure clock
# frequencies (they are not actually used yet).
#USE_CLOCKS = y

# Uncomment to allow mouse type overrides
ALLOW_MOUSE_OVERRIDE = y

#----------------------------------------------------------------------
# Compiler Section
#----------------------------------------------------------------------

# Compiler used.
PC	 = ppc386

ifndef CC
	CC	= gcc
#	CC	= i686-pc-linux-gnu-gcc
#	CC      = gcc -b i486-linuxaout
#	CC      = gcc -b i486-linux
endif


ifndef CFLAGS
	OPTIMIZE = -fomit-frame-pointer -O2 -fno-strength-reduce -pipe -g
else
	OPTIMIZE := $(CFLAGS)
endif

# You might want to add -m386 here if you have a recently installed 
# (486 configured) compiler on a 386. The only real difference is the
# generous alignment padding of function entry-points for the 486.
WARN     = 
INCLUDES = -I$(srcdir)/include -I.
CFLAGS   = $(WARN) $(DLLFLAGS) $(INCLUDES) $(OPTIMIZE) $(DEFINES)
# ELF doesn't like -N. It is beneficial for small tools with a.out
ifeq (a.out, $(TARGET_FORMAT))
	LDFLAGS   = -N -s
else
	LDFLAGS   = -s
endif

# Uncomment the following if you are compiling a.out shared libraries
# with an ELF ld.
#
#MKIMAGEFLAGS = -m i386linux -oformat a.out-i386-linux -qmagic

# additional flags for shared lib.
ifeq (a.out, $(TARGET_FORMAT))
	DLLFLAGS = -B/usr/dll/jump/
else
	DLLFLAGS = -fPIC
endif

# Utilites used.
AR	  = ar
INSTALL_PROGRAM	= install -c -s -m 755 -o root -g bin
INSTALL_SHLIB	= install -c -m 755 -o root -g bin
INSTALL_DATA	= install -c -m 644 -o root -g bin
